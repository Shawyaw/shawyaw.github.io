[{"content":"\n相信自己，一步一个脚印，比自己厉害的人很多，我要做的就是让自己有进步，和自己慢慢比，加油，小酒窝\n","date":"2025-02-25T22:16:25+08:00","permalink":"https://shawyaw.github.io/p/%E6%9D%A5%E8%87%AA%E5%A4%A7%E4%BD%AC%E7%9A%84%E9%BC%93%E5%8A%B1/","title":"来自大佬的鼓励"},{"content":"","date":"2025-02-23T16:12:13+08:00","permalink":"https://shawyaw.github.io/p/%E6%B5%8B%E8%AF%95/","title":"测试"},{"content":"==是一个比较运算符 既可以判断基本类型，又可以判断引用类型 如果判断基本类型，判断的是值是否相等 如果判断引用类型，判断的是地址是否相等，即判断是不是同一个对象 equals是Object类中的方法 只能判断引用类型 默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等，比如Integer，String 在integer类中重写的equals方法，判断的是值是否相等，String类中的equals方法判断的是字符串是否匹配(相等)，以下为源码 String类中重写equals方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject instanceof String) { String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) { char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) { if (v1[i] != v2[i]) return false; i++; } return true; } } return false; } Integer类中重写equals方法 1 2 3 4 5 6 public boolean equals(Object obj) { if (obj instanceof Integer) { return value == ((Integer)obj).intValue(); } return false; } ","date":"2025-02-23T14:11:23+08:00","permalink":"https://shawyaw.github.io/p/equals%E6%96%B9%E6%B3%95%E5%92%8C%E7%9A%84%E6%AF%94%E8%BE%83/","title":"Equals方法和==的比较"}]